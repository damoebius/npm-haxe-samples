// Generated by Haxe 3.4.7
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = function() { };
Main.__name__ = ["Main"];
Main.main = function() {
	haxe_Log.trace("Hello World",{ fileName : "Main.hx", lineNumber : 3, className : "Main", methodName : "main"});
	mconsole_Console.start();
};
Math.__name__ = ["Math"];
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
var ValueType = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var haxe_StackItem = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_Log = function() { };
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	var _g = position;
	while(_g1 < _g) {
		var i = _g1++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var mconsole_PrinterBase = function() {
	this.printPosition = true;
	this.printLineNumbers = true;
};
mconsole_PrinterBase.__name__ = ["mconsole","PrinterBase"];
mconsole_PrinterBase.prototype = {
	print: function(level,params,indent,pos) {
		params = params.slice();
		var _g1 = 0;
		var _g = params.length;
		while(_g1 < _g) {
			var i = _g1++;
			params[i] = Std.string(params[i]);
		}
		var message = params.join(", ");
		var nextPosition = "@ " + pos.className + "." + pos.methodName;
		var nextLineNumber = pos.lineNumber == null ? "null" : "" + pos.lineNumber;
		var lineColumn = "";
		var emptyLineColumn = "";
		if(this.printPosition) {
			if(nextPosition != this.position) {
				this.printLine(mconsole_ConsoleColor.none,nextPosition,pos);
			}
		}
		if(this.printLineNumbers) {
			emptyLineColumn = StringTools.lpad(""," ",5);
			if(nextPosition != this.position || nextLineNumber != this.lineNumber) {
				lineColumn = StringTools.lpad(nextLineNumber," ",4) + " ";
			} else {
				lineColumn = emptyLineColumn;
			}
		}
		this.position = nextPosition;
		this.lineNumber = nextLineNumber;
		var color;
		switch(level[1]) {
		case 0:
			color = mconsole_ConsoleColor.white;
			break;
		case 1:
			color = mconsole_ConsoleColor.blue;
			break;
		case 2:
			color = mconsole_ConsoleColor.green;
			break;
		case 3:
			color = mconsole_ConsoleColor.yellow;
			break;
		case 4:
			color = mconsole_ConsoleColor.red;
			break;
		}
		var indent1 = StringTools.lpad(""," ",indent * 2);
		message = lineColumn + indent1 + message;
		message = message.split("\n").join("\n" + emptyLineColumn + indent1);
		this.printLine(color,message,pos);
	}
	,printLine: function(color,line,pos) {
		throw new js__$Boot_HaxeError("method not implemented in ConsolePrinterBase");
	}
	,__class__: mconsole_PrinterBase
};
var mconsole_Printer = function() { };
mconsole_Printer.__name__ = ["mconsole","Printer"];
mconsole_Printer.prototype = {
	__class__: mconsole_Printer
};
var mconsole_ConsoleView = function() {
	mconsole_PrinterBase.call(this);
	this.atBottom = true;
	this.projectHome = "/home/root/testnpmhx/";
	var document = window.document;
	this.element = document.createElement("pre");
	this.element.id = "console";
	var style = document.createElement("style");
	this.element.appendChild(style);
	var rules = document.createTextNode("#console {\n\tfont-family:monospace;\n\tbackground-color:#002B36;\n\tbackground-color:rgba(0%,16.9%,21.2%,0.95);\n\tpadding:8px;\n\theight:600px;\n\tmax-height:600px;\n\toverflow-y:scroll;\n\tposition:absolute;\n\tleft:0px;\n\ttop:0px;\n\tright:0px;\n\tmargin:0px;\n\tz-index:10000;\n}\n#console a { text-decoration:none; }\n#console a:hover div { background-color:#063642 }\n#console a div span { display:none; float:right; color:white; }\n#console a:hover div span { display:block; }");
	style.type = "text/css";
	if(style.styleSheet) {
		style.styleSheet.cssText = rules.nodeValue;
	} else {
		style.appendChild(rules);
	}
	var me = this;
	this.element.onscroll = function(e) {
		me.updateScroll();
	};
};
mconsole_ConsoleView.__name__ = ["mconsole","ConsoleView"];
mconsole_ConsoleView.__interfaces__ = [mconsole_Printer];
mconsole_ConsoleView.__super__ = mconsole_PrinterBase;
mconsole_ConsoleView.prototype = $extend(mconsole_PrinterBase.prototype,{
	updateScroll: function() {
		this.atBottom = this.element.scrollTop - (this.element.scrollHeight - this.element.clientHeight) == 0;
	}
	,printLine: function(color,line,pos) {
		var style;
		switch(color[1]) {
		case 0:
			style = "#839496";
			break;
		case 1:
			style = "#ffffff";
			break;
		case 2:
			style = "#248bd2";
			break;
		case 3:
			style = "#859900";
			break;
		case 4:
			style = "#b58900";
			break;
		case 5:
			style = "#dc322f";
			break;
		}
		var file = pos.fileName + ":" + pos.lineNumber;
		var fileName = pos.className.split(".").join("/") + ".hx";
		var link = "";
		this.element.innerHTML = this.element.innerHTML + "<a" + link + "><div style='color:" + style + "'>" + line + "<span>" + file + "</span></div></a>";
		if(this.atBottom) {
			this.element.scrollTop = this.element.scrollHeight;
		}
	}
	,attach: function() {
		window.document.body.appendChild(this.element);
	}
	,remove: function() {
		window.document.body.removeChild(this.element);
	}
	,__class__: mconsole_ConsoleView
});
var mconsole_Console = function() { };
mconsole_Console.__name__ = ["mconsole","Console"];
mconsole_Console.start = function() {
	if(mconsole_Console.running) {
		return;
	}
	mconsole_Console.running = true;
	mconsole_Console.previousTrace = haxe_Log.trace;
	haxe_Log.trace = mconsole_Console.haxeTrace;
	var tmp = mconsole_Console.hasConsole;
};
mconsole_Console.stop = function() {
	if(!mconsole_Console.running) {
		return;
	}
	mconsole_Console.running = false;
	haxe_Log.trace = mconsole_Console.previousTrace;
	mconsole_Console.previousTrace = null;
};
mconsole_Console.addPrinter = function(printer) {
	mconsole_Console.removePrinter(printer);
	mconsole_Console.printers.push(printer);
};
mconsole_Console.removePrinter = function(printer) {
	HxOverrides.remove(mconsole_Console.printers,printer);
};
mconsole_Console.haxeTrace = function(value,pos) {
	var params = pos.customParams;
	if(params == null) {
		params = [];
	} else {
		pos.customParams = null;
	}
	var level;
	switch(value) {
	case "debug":
		level = mconsole_LogLevel.debug;
		break;
	case "error":
		level = mconsole_LogLevel.error;
		break;
	case "info":
		level = mconsole_LogLevel.info;
		break;
	case "log":
		level = mconsole_LogLevel.log;
		break;
	case "warn":
		level = mconsole_LogLevel.warn;
		break;
	default:
		params.unshift(value);
		level = mconsole_LogLevel.log;
	}
	if(mconsole_Console.hasConsole) {
		var method = Std.string(level);
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.print = function(level,params,pos) {
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.log = function(message,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "log";
		var params = [message];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var level = mconsole_LogLevel.log;
	var params1 = [message];
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params1,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.info = function(message,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "info";
		var params = [message];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var level = mconsole_LogLevel.info;
	var params1 = [message];
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params1,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.debug = function(message,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "debug";
		var params = [message];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var level = mconsole_LogLevel.debug;
	var params1 = [message];
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params1,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.warn = function(message,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "warn";
		var params = [message];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var level = mconsole_LogLevel.warn;
	var params1 = [message];
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params1,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.error = function(message,stack,pos) {
	if(stack == null) {
		stack = haxe_CallStack.callStack();
	}
	var stackTrace = stack.length > 0 ? "\n" + mconsole_StackHelper.toString(stack) : "";
	if(mconsole_Console.hasConsole) {
		var method = "error";
		var params = [message];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var level = mconsole_LogLevel.error;
	var params1 = ["Error: " + Std.string(message) + stackTrace];
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params1,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.trace = function(pos) {
	if(mconsole_Console.hasConsole) {
		var method = "trace";
		var params = [];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var stack = mconsole_StackHelper.toString(haxe_CallStack.callStack());
	var level = mconsole_LogLevel.error;
	var params1 = ["Stack trace:\n" + stack];
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params1,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.assert = function(expression,message,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "assert";
		var params = [expression,message];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	if(!expression) {
		var stack = mconsole_StackHelper.toString(haxe_CallStack.callStack());
		var level = mconsole_LogLevel.error;
		var params1 = ["Assertion failed: " + Std.string(message) + "\n" + stack];
		var _g = 0;
		var _g1 = mconsole_Console.printers;
		while(_g < _g1.length) {
			var printer = _g1[_g];
			++_g;
			printer.print(level,params1,mconsole_Console.groupDepth,pos);
		}
		throw js__$Boot_HaxeError.wrap(message);
	}
};
mconsole_Console.count = function(title,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "count";
		var params = [title];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var position = pos.fileName + ":" + pos.lineNumber;
	var count;
	var _this = mconsole_Console.counts;
	if(__map_reserved[position] != null ? _this.existsReserved(position) : _this.h.hasOwnProperty(position)) {
		var _this1 = mconsole_Console.counts;
		count = (__map_reserved[position] != null ? _this1.getReserved(position) : _this1.h[position]) + 1;
	} else {
		count = 1;
	}
	var _this2 = mconsole_Console.counts;
	if(__map_reserved[position] != null) {
		_this2.setReserved(position,count);
	} else {
		_this2.h[position] = count;
	}
	var level = mconsole_LogLevel.log;
	var params1 = [title + ": " + count];
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params1,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.group = function(message,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "group";
		var params = [message];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var level = mconsole_LogLevel.log;
	var params1 = [message];
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params1,mconsole_Console.groupDepth,pos);
	}
	mconsole_Console.groupDepth += 1;
};
mconsole_Console.groupEnd = function(pos) {
	if(mconsole_Console.hasConsole) {
		var method = "groupEnd";
		var params = [];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	if(mconsole_Console.groupDepth > 0) {
		mconsole_Console.groupDepth -= 1;
	}
};
mconsole_Console.time = function(name,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "time";
		var params = [name];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var _this = mconsole_Console.times;
	var value = new Date().getTime() / 1000;
	if(__map_reserved[name] != null) {
		_this.setReserved(name,value);
	} else {
		_this.h[name] = value;
	}
};
mconsole_Console.timeEnd = function(name,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "timeEnd";
		var params = [name];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var _this = mconsole_Console.times;
	if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
		var level = mconsole_LogLevel.log;
		var x = new Date().getTime() / 1000;
		var _this1 = mconsole_Console.times;
		var params1 = [name + ": " + ((x - (__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name])) * 1000 | 0) + "ms"];
		var _g = 0;
		var _g1 = mconsole_Console.printers;
		while(_g < _g1.length) {
			var printer = _g1[_g];
			++_g;
			printer.print(level,params1,mconsole_Console.groupDepth,pos);
		}
		mconsole_Console.times.remove(name);
	}
};
mconsole_Console.markTimeline = function(label,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "markTimeline";
		var params = [label];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
};
mconsole_Console.profile = function(title,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "profile";
		var params = [title];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
};
mconsole_Console.profileEnd = function(title,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "profileEnd";
		var params = [title];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
};
mconsole_Console.enterDebugger = function() {
	debugger;
};
mconsole_Console.detectConsole = function() {
	if(console != null && console[mconsole_Console.dirxml] == null) {
		mconsole_Console.dirxml = "log";
	}
	return console != undefined && console.log != undefined && console.warn != undefined;
};
mconsole_Console.callConsole = function(method,params) {
	if(console[method] != null) {
		if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
			method = mconsole_Console.dirxml;
		}
		if(console[method].apply != null) {
			var $console = console[method];
			var tmp = mconsole_Console.toConsoleValues(params);
			$console.apply(console,tmp);
		} else if(Function.prototype.bind != null) {
			var tmp1 = Function.prototype.bind.call(console[method],console);
			var tmp2 = mconsole_Console.toConsoleValues(params);
			tmp1.apply(console,tmp2);
		}
	}
};
mconsole_Console.toConsoleValues = function(params) {
	var _g1 = 0;
	var _g = params.length;
	while(_g1 < _g) {
		var i = _g1++;
		params[i] = mconsole_Console.toConsoleValue(params[i]);
	}
	return params;
};
mconsole_Console.toConsoleValue = function(value) {
	var o = value;
	var typeClass = o == null ? null : js_Boot.getClass(o);
	var typeName = typeClass == null ? "" : Type.getClassName(typeClass);
	if(typeName == "Xml") {
		var parser = new DOMParser();
		var tmp = value.toString();
		return parser.parseFromString(tmp,"text/xml").firstChild;
	} else if(typeName == "Map" || typeName == "StringMap" || typeName == "IntMap") {
		var $native = { };
		var map = value;
		var key = map.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			$native[Std.string(key1)] = mconsole_Console.toConsoleValue(map.get(key1));
		}
		return $native;
	} else {
		var _g = Type["typeof"](value);
		if(_g[1] == 7) {
			var e = _g[2];
			var native1 = [];
			var name = Type.getEnumName(e) + "." + value[0];
			var params = value.slice(2);
			if(params.length > 0) {
				native1.push(name + "(");
				var _g1 = 0;
				var _g2 = params.length;
				while(_g1 < _g2) {
					var i = _g1++;
					native1.push(mconsole_Console.toConsoleValue(params[i]));
				}
				native1.push(")");
			} else {
				return [name];
			}
			return native1;
		}
		if(typeName == "Array" || typeName == "List" || typeName == "haxe.FastList") {
			var native2 = [];
			var iterable = value;
			var i1 = $iterator(iterable)();
			while(i1.hasNext()) {
				var i2 = i1.next();
				native2.push(mconsole_Console.toConsoleValue(i2));
			}
			return native2;
		}
	}
	return value;
};
var mconsole_ConsoleMacro = function() { };
mconsole_ConsoleMacro.__name__ = ["mconsole","ConsoleMacro"];
var mconsole_LogLevel = { __ename__ : ["mconsole","LogLevel"], __constructs__ : ["log","info","debug","warn","error"] };
mconsole_LogLevel.log = ["log",0];
mconsole_LogLevel.log.toString = $estr;
mconsole_LogLevel.log.__enum__ = mconsole_LogLevel;
mconsole_LogLevel.info = ["info",1];
mconsole_LogLevel.info.toString = $estr;
mconsole_LogLevel.info.__enum__ = mconsole_LogLevel;
mconsole_LogLevel.debug = ["debug",2];
mconsole_LogLevel.debug.toString = $estr;
mconsole_LogLevel.debug.__enum__ = mconsole_LogLevel;
mconsole_LogLevel.warn = ["warn",3];
mconsole_LogLevel.warn.toString = $estr;
mconsole_LogLevel.warn.__enum__ = mconsole_LogLevel;
mconsole_LogLevel.error = ["error",4];
mconsole_LogLevel.error.toString = $estr;
mconsole_LogLevel.error.__enum__ = mconsole_LogLevel;
var mconsole_ConsoleColor = { __ename__ : ["mconsole","ConsoleColor"], __constructs__ : ["none","white","blue","green","yellow","red"] };
mconsole_ConsoleColor.none = ["none",0];
mconsole_ConsoleColor.none.toString = $estr;
mconsole_ConsoleColor.none.__enum__ = mconsole_ConsoleColor;
mconsole_ConsoleColor.white = ["white",1];
mconsole_ConsoleColor.white.toString = $estr;
mconsole_ConsoleColor.white.__enum__ = mconsole_ConsoleColor;
mconsole_ConsoleColor.blue = ["blue",2];
mconsole_ConsoleColor.blue.toString = $estr;
mconsole_ConsoleColor.blue.__enum__ = mconsole_ConsoleColor;
mconsole_ConsoleColor.green = ["green",3];
mconsole_ConsoleColor.green.toString = $estr;
mconsole_ConsoleColor.green.__enum__ = mconsole_ConsoleColor;
mconsole_ConsoleColor.yellow = ["yellow",4];
mconsole_ConsoleColor.yellow.toString = $estr;
mconsole_ConsoleColor.yellow.__enum__ = mconsole_ConsoleColor;
mconsole_ConsoleColor.red = ["red",5];
mconsole_ConsoleColor.red.toString = $estr;
mconsole_ConsoleColor.red.__enum__ = mconsole_ConsoleColor;
var mconsole_StackHelper = function() { };
mconsole_StackHelper.__name__ = ["mconsole","StackHelper"];
mconsole_StackHelper.createFilters = function() {
	var filters = new haxe_ds_StringMap();
	if(__map_reserved["@ mconsole.ConsoleRedirect.haxeTrace:59"] != null) {
		filters.setReserved("@ mconsole.ConsoleRedirect.haxeTrace:59",true);
	} else {
		filters.h["@ mconsole.ConsoleRedirect.haxeTrace:59"] = true;
	}
	return filters;
};
mconsole_StackHelper.toString = function(stack) {
	return "null";
};
var mconsole_StackItemHelper = function() { };
mconsole_StackItemHelper.__name__ = ["mconsole","StackItemHelper"];
mconsole_StackItemHelper.toString = function(item,isFirst) {
	if(isFirst == null) {
		isFirst = false;
	}
	switch(item[1]) {
	case 0:
		return "(anonymous function)";
	case 1:
		var module = item[2];
		return module;
	case 2:
		var line = item[4];
		var file = item[3];
		var s = item[2];
		return (s == null ? file.split("::").join(".") + ":" + line : mconsole_StackItemHelper.toString(s)) + ":" + line;
	case 3:
		var method = item[3];
		var className = item[2];
		return className + "." + method;
	case 4:
		var v = item[2];
		return "LocalFunction(" + v + ")";
	}
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
js_Boot.__toStr = ({ }).toString;
mconsole_ConsoleView.CONSOLE_STYLES = "#console {\n\tfont-family:monospace;\n\tbackground-color:#002B36;\n\tbackground-color:rgba(0%,16.9%,21.2%,0.95);\n\tpadding:8px;\n\theight:600px;\n\tmax-height:600px;\n\toverflow-y:scroll;\n\tposition:absolute;\n\tleft:0px;\n\ttop:0px;\n\tright:0px;\n\tmargin:0px;\n\tz-index:10000;\n}\n#console a { text-decoration:none; }\n#console a:hover div { background-color:#063642 }\n#console a div span { display:none; float:right; color:white; }\n#console a:hover div span { display:block; }";
mconsole_Console.defaultPrinter = new mconsole_ConsoleView();
mconsole_Console.printers = [mconsole_Console.defaultPrinter];
mconsole_Console.groupDepth = 0;
mconsole_Console.times = new haxe_ds_StringMap();
mconsole_Console.counts = new haxe_ds_StringMap();
mconsole_Console.running = false;
mconsole_Console.dirxml = "dirxml";
mconsole_Console.hasConsole = mconsole_Console.detectConsole();
mconsole_ConsoleMacro.__meta__ = { obj : { IgnoreCover : null}};
mconsole_StackHelper.filters = mconsole_StackHelper.createFilters();
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
